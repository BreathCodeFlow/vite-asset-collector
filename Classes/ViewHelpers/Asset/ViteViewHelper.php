<?php

declare(strict_types=1);

namespace Praetorius\ViteAssetCollector\ViewHelpers\Asset;

use Praetorius\ViteAssetCollector\Service\ViteService;
use Psr\Http\Message\UriInterface;
use TYPO3\CMS\Core\Configuration\ExtensionConfiguration;
use TYPO3\CMS\Core\Core\Environment;
use TYPO3\CMS\Core\Http\Uri;
use TYPO3Fluid\Fluid\Core\ViewHelper\AbstractViewHelper;

/**
 * This ViewHelper adds frontend assets generated by vite to
 * TYPO3's asset collector
 */
final class ViteViewHelper extends AbstractViewHelper
{
    protected ExtensionConfiguration $extensionConfiguration;

    protected ViteService $viteService;

    public function initializeArguments(): void
    {
        $this->registerArgument('manifest', 'string', 'Path to vite manifest file', true);
        $this->registerArgument('entry', 'string', 'Name of entrypoint that should be included', true);
        $this->registerArgument('devTagAttributes', 'array', 'Additional attributes for dev server script tags.', false, []);
        $this->registerArgument('scriptTagAttributes', 'array', 'Additional attributes for script tags.', false, []);
        $this->registerArgument('cssTagAttributes', 'array', 'Additional attributes for css link tags.', false, []);
        $this->registerArgument(
            'priority',
            'boolean',
            'Define whether the assets should be included before other assets.',
            false,
            false
        );
    }

    public function render(): string
    {
        $assetOptions = [
            'priority' => $this->arguments['priority'],
        ];

        if ($this->useDevServer()) {
            $this->viteService->addAssetsFromDevServer(
                $this->getDevServerUri(),
                $this->arguments['entry'],
                $assetOptions,
                $this->arguments['devTagAttributes']
            );
        } else {
            $this->viteService->addAssetsFromManifest(
                $this->arguments['manifest'],
                $this->arguments['entry'],
                true,
                $assetOptions,
                $this->arguments['scriptTagAttributes'],
                $this->arguments['cssTagAttributes']
            );
        }
        return '';
    }

    private function useDevServer(): bool
    {
        $useDevServer = $this->extensionConfiguration->get('vite_asset_collector', 'useDevServer');
        if ($useDevServer === 'auto') {
            return Environment::getContext()->isDevelopment();
        }
        return (bool)$useDevServer;
    }

    private function getDevServerUri(): UriInterface
    {
        $devServerUri = $this->extensionConfiguration->get('vite_asset_collector', 'devServerUri');
        if ($devServerUri === 'auto') {
            return $this->viteService->determineDevServer($this->renderingContext->getRequest());
        }
        return new Uri($devServerUri);
    }

    public function injectViteService(ViteService $viteService): void
    {
        $this->viteService = $viteService;
    }

    public function injectExtensionConfiguration(ExtensionConfiguration $extensionConfiguration): void
    {
        $this->extensionConfiguration = $extensionConfiguration;
    }
}
